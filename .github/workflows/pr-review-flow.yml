name: PR Review Flow

on:
  pull_request_review:
    types: [submitted]

permissions:
  pull-requests: write    # For managing reviews
  issues: write           # For labels

jobs:
  check-required-reviews:
    outputs:
      needs_facilitators: ${{ steps.update-labels.outputs.needs_facilitators }}
      needs_tech_review: ${{ steps.update-labels.outputs.needs_tech_review }}
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      
      - name: Initial review check
        id: initial-check
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PR_TOKEN }}
          script: |
            const review = context.payload.review;
            
            core.info('üîÑ Processing review...');
            if (review.state !== 'approved') {
              core.info('‚ùå Not an approval review, skipping');
              core.setOutput('should_continue', 'false');
              return;
            }
            
            core.info('‚úÖ Approval detected');
            core.setOutput('should_continue', 'true');

      - name: Get active approvals and PR files
        if: steps.initial-check.outputs.should_continue == 'true'
        id: get-approvals
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PR_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            
            core.info('üìÅ Getting PR files and reviews...');
            const { data: prFiles } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });

            const latestReviews = new Map();
            reviews.forEach(review => {
              latestReviews.set(review.user.login, review);
            });

            const activeApprovals = Array.from(latestReviews.values())
              .filter(review => review.state === 'APPROVED')
              .map(review => review.user.login);
            
            const prFilePaths = prFiles.map(file => file.filename);
            
            core.info(`üìã Active approvers: ${activeApprovals.join(', ')}`);
            core.setOutput('files', JSON.stringify(prFilePaths));
            core.setOutput('approvals', JSON.stringify(activeApprovals));
      
      - name: Read review requirement files
        if: steps.initial-check.outputs.should_continue == 'true'
        id: read-files
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PR_TOKEN }}
          script: |
            try {
              const prFiles = JSON.parse('${{ steps.get-approvals.outputs.files }}');
              
              function globToRegExp(pattern) {
                return new RegExp('^' + pattern
                  .replace(/\//g, '\\/')
                  .replace(/\*/g, '[^\\/]*')
                  .replace(/\?/g, '[^\\/]') + '$');
              }
        
              const parseOwnersFile = async (path) => {
                const { data: file } = await github.rest.repos.getContent({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: path
                });
                
                const content = Buffer.from(file.content, 'base64').toString();
                const relevantOwners = new Set();
                
                content.split('\n').forEach(line => {
                  line = line.trim();
                  if (!line || line.startsWith('#')) return;
                  
                  const [pattern, ...owners] = line.split(/\s+/);
                  const regex = globToRegExp(pattern);
                  
                  if (prFiles.some(file => regex.test(file))) {
                    owners.forEach(owner => relevantOwners.add(owner));
                  }
                });
                
                return Array.from(relevantOwners);
              };
        
              const codeowners = await parseOwnersFile('.github/CODEOWNERS');
              const facilitators = await parseOwnersFile('.github/CODEFACILITATORS');
              const tech = await parseOwnersFile('.github/CODETECHTEAM');
              
              core.info('üë• Required reviewers:');
              core.info(`   Codeowners: ${codeowners.join(', ')}`);
              core.info(`   Facilitators: ${facilitators.join(', ')}`);
              core.info(`   Tech team: ${tech.join(', ')}`);

              const requirements = {
                codeowners,
                facilitators,
                tech
              };
              
              core.setOutput('requirements', JSON.stringify(requirements));
            } catch (error) {
              core.error('‚ùå Error parsing requirements:', error);
              throw error;
            }

      - name: Check approval status
        if: steps.initial-check.outputs.should_continue == 'true'
        id: check-status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PR_TOKEN }}
          script: |
            const activeApprovals = JSON.parse('${{ steps.get-approvals.outputs.approvals }}');
            const requirements = JSON.parse('${{ steps.read-files.outputs.requirements }}');
            
            core.info('üîç Checking team approvals...');

            const checkTeamApprovals = async (teams, approvers) => {
              return Promise.all(
                teams.map(async team => {
                  const [org, team_slug] = team.replace('@', '').split('/');
                  
                  for (const approver of approvers) {
                    try {
                      const { data: membership } = await github.rest.teams.getMembershipForUserInOrg({
                        org, team_slug, username: approver,
                      });
                      if (membership.state === 'active') {
                        core.info(`‚úÖ Found approval from ${approver} for ${team}`);
                        return true;
                      }
                    } catch (error) {
                      core.info(`‚ùå ${approver} is not a member of ${team}`);
                    }
                  }
                  core.info(`‚ùå No approving members found for ${team}`);
                  return false;
                })
              ).then(results => results.every(Boolean));
            };
            
            const hasAllCodeownersApproval = await checkTeamApprovals(requirements.codeowners, activeApprovals);
            const hasAllFacilitatorsApproval = await checkTeamApprovals(requirements.facilitators, activeApprovals);
            const hasAllTechApproval = await checkTeamApprovals(requirements.tech, activeApprovals);
            
            core.info('üìä Approval status:');
            core.info(`   Codeowners: ${hasAllCodeownersApproval ? '‚úÖ' : '‚ùå'}`);
            core.info(`   Facilitators: ${hasAllFacilitatorsApproval ? '‚úÖ' : '‚ùå'}`);
            core.info(`   Tech-team: ${hasAllTechApproval ? '‚úÖ' : '‚ùå'}`);
            
            core.setOutput('status', JSON.stringify({
              codeownersApproved: hasAllCodeownersApproval,
              facilitatorsApproved: hasAllFacilitatorsApproval,
              techApproved: hasAllTechApproval
            }));

      - name: Update labels
        id: update-labels
        if: steps.initial-check.outputs.should_continue == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const status = JSON.parse('${{ steps.check-status.outputs.status }}');
            
            core.info('üè∑Ô∏è Updating PR labels...');
            let needsFacilitators = false;
            let needsTechReview = false;
            
            if (status.codeownersApproved && !status.facilitatorsApproved) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: ['ready-for-facilitators-review']
              });
              core.info('   Added ready-for-facilitators-review label');
              needsFacilitators = true;
            }
            
            if (status.codeownersApproved && status.facilitatorsApproved && !status.techApproved) {
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  name: 'ready-for-facilitators-review'
                });
                core.info('   Removed ready-for-facilitators-review label');
              } catch (error) {
                core.info('   No facilitators label to remove');
              }
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: ['ready-for-tech-review']
              });
              core.info('   Added ready-for-tech-review label');
              needsTechReview = true;
            }
            
            if (status.codeownersApproved && status.facilitatorsApproved && status.techApproved) {
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  name: 'ready-for-tech-review'
                });
                core.info('   Removed ready-for-tech-review label');
              } catch (error) {
                core.info('   No tech team label to remove');
              }
            }
            
            core.setOutput('needs_facilitators', needsFacilitators);
            core.setOutput('needs_tech_review', needsTechReview);

  add-facilitators:
    needs: check-required-reviews
    if: needs.check-required-reviews.outputs.needs_facilitators == 'true'
    runs-on: self-hosted
    steps:    
      - name: "Assign Code Facilitators to PR"
        id: add-facilitators
        uses: LexxaRRioo/codefacilitators@actually-add-debugging-with-rebuild
        continue-on-error: true
        with:
          token: ${{ secrets.PR_TOKEN }}
          file: .github/CODEFACILITATORS
          add_groups_directly: true
          
  add-tech-team:
    needs: check-required-reviews
    if: needs.check-required-reviews.outputs.needs_tech_review == 'true'
    runs-on: self-hosted
    steps:    
      - name: "Assign tech team to PR"
        id: add-tech-team
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PR_TOKEN }}
          script: |            
            try {              
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.payload.pull_request.number,
                team_reviewers: ['tech-team']
              });
              console.log('Successfully added tech-team as reviewer');
              
            } catch (error) {
              console.error('Error details:', {
                message: error.message,
                status: error.status,
                response: error.response?.data
              });
              throw error;
            }
