name: PR Review Flow

on:
  pull_request_review:
    types: [submitted]

permissions:
  pull-requests: write    # For managing reviews
  issues: write          # For labels

jobs:
  check-required-reviews:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      
      - name: Check required reviews and process approvals
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const review = context.payload.review;
            
            // Skip if review is not approval
            if (review.state !== 'APPROVED') {
              return;
            }
            
            // Get current reviewers and teams
            const { data: reviewRequests } = await github.rest.pulls.listRequestedReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            // Get all reviews
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            // Get active approvals (last review from each user)
            const latestReviews = new Map();
            reviews.forEach(review => {
              latestReviews.set(review.user.login, review);
            });
            const activeApprovals = Array.from(latestReviews.values())
              .filter(review => review.state === 'APPROVED');
            
            // Count required CODEOWNERS reviews
            const codeownersTeams = reviewRequests.teams.filter(team => 
              team.slug.includes('owner') // adjust pattern based on your team naming
            ).length;
            
            console.log(`Required CODEOWNERS reviews: ${codeownersTeams}`);
            
            const hasTechTeam = reviewRequests.teams.some(team => 
              team.slug === 'tech_team'
            );
            
            // If we have all CODEOWNERS approvals but no tech_team yet
            if (activeApprovals.length >= codeownersTeams && !hasTechTeam) {
              // First try CODEFACILITATORS
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: ['ready-for-facilitators']
              });
            }

  add-facilitators:
    needs: check-required-reviews
    if: contains(github.event.pull_request.labels.*.name, 'ready-for-facilitators')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: "Assign Code Facilitators to PR"
        id: add-facilitators
        uses: 0xtekgrinder/codefacilitators@v1
        continue-on-error: true
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          file: ./github/CODEFACILITATORS
      
      - name: Add tech team
        if: steps.add-facilitators.outcome == 'failure' || always()  # Add tech_team in any case
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // Add tech_team review
            await github.rest.pulls.requestReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
              team_reviewers: ['tech_team']
            });
            
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              labels: ['ready-for-tech-review']
            });
