name: PR Review Flow -- set labels

on:
  pull_request_review:
    types: [submitted]

permissions:
  pull-requests: write    # For managing reviews
  issues: write          # For labels

jobs:
  check-required-reviews:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      
      - name: Initial review check
        id: initial-check
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const review = context.payload.review;
            
            console.log('Current review state:', review.state);
            
            // Skip if review is not approval
            if (review.state !== 'approved') {
              console.log('Skipping: Not an approval review');
              core.setOutput('should_continue', 'false');
              return;
            }
            
            console.log('Approval review detected, continuing...');
            core.setOutput('should_continue', 'true');

      - name: Get active approvals
        if: steps.initial-check.outputs.should_continue == 'true'
        id: get-approvals
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            console.log('Getting approvals for PR:', pr.number);
            
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            // Get active approvals (last review from each user)
            const latestReviews = new Map();
            reviews.forEach(review => {
              latestReviews.set(review.user.login, review);
            });
            const activeApprovals = Array.from(latestReviews.values())
              .filter(review => review.state === 'approved')
              .map(review => review.user.login);
            
            console.log('Active approvals:', activeApprovals);
            core.setOutput('approvals', JSON.stringify(activeApprovals));

      - name: Read review requirement files
        if: steps.initial-check.outputs.should_continue == 'true'
        id: read-files
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            console.log('Reading CODEOWNERS and CODEFACILITATORS files');
            
            const { data: codeowners } = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: '.github/CODEOWNERS'
            });
            
            const { data: facilitators } = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: '.github/CODEFACILITATORS'
            });
            
            const codeownersContent = Buffer.from(codeowners.content, 'base64').toString();
            const facilitatorsContent = Buffer.from(facilitators.content, 'base64').toString();
            
            // Extract usernames/teams from the files
            const codeownersUsers = codeownersContent.match(/@[\w-]+/g) || [];
            const facilitatorsUsers = facilitatorsContent.match(/@[\w-]+/g) || [];
            
            console.log('Required reviewers:', {
              codeowners: codeownersUsers,
              facilitators: facilitatorsUsers
            });
            
            core.setOutput('requirements', JSON.stringify({
              codeowners: codeownersUsers,
              facilitators: facilitatorsUsers
            }));

      - name: Check existing approvals
        if: steps.initial-check.outputs.should_continue == 'true'
        id: check-existing
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const activeApprovals = JSON.parse(core.getInput('approvals'));
            const requirements = JSON.parse(core.getInput('requirements'));
            
            console.log('Checking for existing facilitator/tech-team approvals');
            
            // Check for facilitator approvals
            const hasFacilitatorApproval = activeApprovals.some(user => 
              requirements.facilitators.includes('@' + user)
            );
            
            console.log('Has facilitator approval:', hasFacilitatorApproval);
            
            if (hasFacilitatorApproval) {
              console.log('Already has facilitator approval, skipping further checks');
              core.setOutput('should_continue', 'false');
              return;
            }
            
            core.setOutput('should_continue', 'true');

      - name: Check approval status
        if: steps.check-existing.outputs.should_continue == 'true'
        id: check-status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const activeApprovals = JSON.parse(core.getInput('approvals'));
            const requirements = JSON.parse(core.getInput('requirements'));
            
            console.log('Checking approval status');
            
            // Check if all required CODEOWNERS have approved
            const hasAllCodeownersApproval = requirements.codeowners.every(owner => 
              activeApprovals.some(user => '@' + user === owner)
            );
            
            // Check if all required facilitators have approved
            const hasAllFacilitatorsApproval = requirements.facilitators.every(facilitator => 
              activeApprovals.some(user => '@' + user === facilitator)
            );
            
            console.log('Approval status:', {
              codeownersApproved: hasAllCodeownersApproval,
              facilitatorsApproved: hasAllFacilitatorsApproval
            });
            
            core.setOutput('status', JSON.stringify({
              codeownersApproved: hasAllCodeownersApproval,
              facilitatorsApproved: hasAllFacilitatorsApproval
            }));

      - name: Update labels
        if: steps.check-existing.outputs.should_continue == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const status = JSON.parse(core.getInput('status'));
            
            console.log('Updating labels based on status:', status);
            
            if (status.codeownersApproved && !status.facilitatorsApproved) {
              console.log('Adding ready-for-facilitators label');
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: ['ready-for-facilitators']
              });
            }
            
            if (status.codeownersApproved && status.facilitatorsApproved) {
              console.log('Updating labels for tech-team review');
              try {
                await github.rest.issues.removeLabel({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  name: 'ready-for-facilitators'
                });
                console.log('Removed ready-for-facilitators label');
              } catch (error) {
                console.log('No facilitators label to remove');
              }
              
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: ['ready-for-tech-review']
              });
              console.log('Added ready-for-tech-review label');
            }
