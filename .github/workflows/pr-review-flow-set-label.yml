name: PR Review Flow

on:
  pull_request_review:
    types: [submitted]

permissions:
  pull-requests: write    # For managing reviews
  issues: write          # For labels

jobs:
  check-required-reviews:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      
      - name: Check required reviews and process approvals
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pr = context.payload.pull_request;
            const review = context.payload.review;
            
            console.log('Processing review:', {
              pr_number: pr.number,
              reviewer: review.user.login,
              review_state: review.state
            });
            
            // Skip if review is not approval
            if (review.state !== 'approved') {
              console.log('Skipping: Not an approval review');
              return;
            }
            
            // Get current reviewers and teams
            const { data: reviewRequests } = await github.rest.pulls.listRequestedReviewers({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            console.log('Current review requests:', {
              requested_users: reviewRequests.users.map(u => u.login),
              requested_teams: reviewRequests.teams.map(t => t.slug)
            });
            
            // Get all reviews
            const { data: reviews } = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });
            
            console.log('All reviews:', reviews.map(r => ({
              user: r.user.login,
              state: r.state,
              submitted_at: r.submitted_at
            })));
            
            // Get active approvals (last review from each user)
            const latestReviews = new Map();
            reviews.forEach(review => {
              latestReviews.set(review.user.login, review);
            });
            const activeApprovals = Array.from(latestReviews.values())
              .filter(review => review.state === 'approved');
            
            console.log('Active approvals:', activeApprovals.map(r => r.user.login));
            
            // Count required CODEOWNERS reviews
            const codeownersTeams = reviewRequests.teams.filter(team => 
              team.slug.toLowerCase().includes('owner') // Made case-insensitive
            ).length;
            
            console.log('Review status:', {
              required_codeowners: codeownersTeams,
              current_approvals: activeApprovals.length
            });
            
            const hasTechTeam = reviewRequests.teams.some(team => 
              team.slug.toLowerCase() === 'tech_team' // Made case-insensitive
            );
            
            console.log('Tech team status:', { hasTechTeam });
            
            // If we have all CODEOWNERS approvals but no tech_team yet
            if (activeApprovals.length >= codeownersTeams && !hasTechTeam) {
              console.log('Adding ready-for-facilitators label');
              try {
                await github.rest.issues.addLabels({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  labels: ['ready-for-facilitators']
                });
              } catch (error) {
                console.error('Failed to add facilitators label:', error);
                throw error;
              }
            }
